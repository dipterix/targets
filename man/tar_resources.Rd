% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_resources.R
\name{tar_resources}
\alias{tar_resources}
\title{Target resources}
\usage{
tar_resources(
  fst = tar_option_get("resources")$fst,
  future = tar_option_get("resources")$future,
  network = tar_option_get("resources")$network,
  url = tar_option_get("resources")$url
)
}
\arguments{
\item{fst}{Output of function \code{tar_resources_fst()}.
Non-default arguments to \code{fst::read_fst()} and
\code{fst::write_fst()} for \code{fst}-based storage formats.
Applies to all formats ending with \code{"fst"} in the name.
For details on formats, see the \code{format} argument of \code{\link[=tar_target]{tar_target()}}.}

\item{future}{Output of function \code{tar_resources_future()}.}

\item{network}{Output of function \code{tar_resources_network()}.
Settings to configure how to handle unreliable network connections
in the case of uploading, downloading, and checking data
in situations that rely on network file systems or HTTP/HTTPS requests.
Examples include retries and timeouts for internal storage management
operations for \code{storage = "worker"} or \code{format = "file"}
(on network file systems),
\code{format = "url"}. These settings do not
apply to actions you take in the custom R command of the target.}

\item{url}{Output of function \code{tar_resources_url()}.
Non-default settings for storage formats ending with the \code{"_url"} suffix.
These settings include the \code{curl} handle for extra control over HTTP
requests. For details on formats, see the \code{format} argument of
\code{\link[=tar_target]{tar_target()}}.}
}
\value{
A list of objects of class \code{"tar_resources"} with
non-default settings of various optional backends for data storage
and high-performance computing.
}
\description{
Create a \code{resources} argument for \code{\link[=tar_target]{tar_target()}}
or \code{\link[=tar_option_set]{tar_option_set()}}.
}
\section{Resources}{

Functions \code{\link[=tar_target]{tar_target()}} and \code{\link[=tar_option_set]{tar_option_set()}}
each takes an optional \code{resources} argument to supply
non-default settings of various optional backends for data storage
and high-performance computing. The \code{tar_resources()} function
is a helper to supply those settings in the correct manner.

In \code{targets} version 0.12.2 and above, resources are inherited one-by-one
in nested fashion from \code{tar_option_get("resources")}.
}

\examples{
# Somewhere in you target script file (usually _targets.R):
tar_target(
  name,
  command(),
  resources = tar_resources(
    future = tar_resources_future(resources = list(n_cores = 1))
  )
)
}
\seealso{
Other resources: 
\code{\link{tar_resources_fst}()},
\code{\link{tar_resources_future}()},
\code{\link{tar_resources_network}()},
\code{\link{tar_resources_url}()}
}
\concept{resources}
